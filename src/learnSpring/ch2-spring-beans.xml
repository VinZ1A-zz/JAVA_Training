<?xml version="1.0" encoding="UTF-8"?>
<!-- using schema/context : we are using annotations (see Reservation classes)  -->
<!-- could use as well other schemas: jms, aop, jee, tx, lang, util...  
     just need to add the appropriate xmlns:jms property in 'beans' (new namespace) and amend the schemaLocation --> 
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"
    default-init-method="initMe"> <!--  can also define a global destroy method -->
  <!-- instead of namespaces, can also use DTD-style configuration: ( !! deprecated !! )
  <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
     "http://www.springframework.org/dtd/spring-beans.dtd">
   -->
       
  <!--  also possible: id, scope, dependencies, ... -->
  <bean name="person"
  	class="learnSpring.fundamentals.Person">
  	<!--  can use either constructor params or setters -->
  	<constructor-arg value="zeFirstName"></constructor-arg> <!-- can add index="0"(1..) type="String"(int..)  -->
  	<constructor-arg value="zeLastName"></constructor-arg>
  	<property name="age" value="28"></property>
  	<property name="address" ref="address"></property><!--  setter type injection: passing a Person.Address instance -->
  </bean>
  
  <!--  inner class of Person  -->
  <bean name="address"
  class="learnSpring.fundamentals.Person$Address">
  	  <property name="doorNumber" value="3"></property>
  	  <property name="firstLine" value="address First Line"></property>
  	  <property name="secondLine" value="address Second Line"></property>
  	  <property name="zipCode" value="2032"></property>
  	  <!--  could define an anonymous bean here within a property 
  	  <property name="platformLineEnder">
  	    <bean class="xxx.yyy.zzz"/> 
  	  </property>
  	   -->
  </bean>
  <alias name="address" alias="billingAddress"/> <!--  can be used in application as well -->
  
  <!--  note: the wiring between classes is done through annotations in class (Manager) -->
  <context:annotation-config/>
  <!-- wiring is done by type and not by Name (hence resSvcABC chosen to illustrate it)  -->
   <context:component-scan base-package="learnSpring.fundamentals"/>
  <!--  
  <bean name="resSvcABC"
    class="learnSpring.fundamentals.ReservationService"/> -->
  <!--  no need for a Service reference any longer thanks to autoWiring -->
  <bean name="reservationManager"
    class="learnSpring.fundamentals.ReservationManager"/>

  <!--  could define other containers :
  		<jms:listener-container>
  		 ...
  		</jms:listener-container>
   -->
   
   <!--  init and destrop can also be defined globally through default-init-method / default-destroy-method -->
   <bean name="fxRateProvider" class="learnSpring.fundamentals.FxRateProvider" init-method="initMe" destroy-method="destroyMe">
   	 <property name="baseCurrency" value="USD">
   </property></bean>
   
   <!-- instanciating Singleton / using a static method as a class initializer -->
   <bean name="employeeFactory" class="learnSpring.fundamentals.EmployeeFactory" factory-method="getEmployeeFactory">
   </bean>
   
   <!--  instanciating a employee/executinve through non-static methods within a creator instance ('factory bean') -->
   <bean name="employeeCreator" class="learnSpring.fundamentals.EmployeeCreator">
   </bean>
   <bean name="employee" factory-bean="employeeCreator" factory-method="createEmployee"/>
   <bean name="executive" factory-bean="employeeCreator" factory-method="createExecutive"/>

	<bean name="specialEmployee" class="learnSpring.fundamentals.SpecialEmployee">
		<property name="otherAttribute" value="THROUGH_CONFIG"></property>
	</bean>
	
	<bean name="contextStartEventListener" class="learnSpring.fundamentals.ContextStartedEventListener"/>

	<!--  illustrating basic custom event : declares Publisher and Listener -->
	<bean name="hugeFileEventPublisher" class="learnSpring.fundamentals.HugeFileEventPublisher"/>
	<bean name="hugeFileEventListener" class="learnSpring.fundamentals.HugeFileEventListener"/> 
	

</beans>
